<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Watch Product Page</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background-color: #f7f7f7;
            line-height: 1.6;
        }

        /* Product Grid */
        .product-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            max-width: 1200px;
            margin: 2rem auto;
            padding: 1rem;
        }

        /* Image Gallery */
        .image-gallery {
            position: relative;
        }

        .main-image-container {
            position: relative;
            overflow: hidden;
            cursor: zoom-in;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .main-image {
            width: 100%;
            height: 400px;
            object-fit: contain;
            transition: transform 0.3s ease;
        }

        .zoom-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-repeat: no-repeat;
            background-size: 200%;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 10;
        }

        .thumbnail-container {
            display: flex;
            justify-content: center;
            gap: 0.75rem;
            margin-top: 1rem;
        }

        .thumbnail {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border: 1px solid #eee;
            border-radius: 5px;
            cursor: pointer;
            opacity: 0.6;
            transition: all 0.3s ease;
        }

        .thumbnail.active, .thumbnail:hover {
            opacity: 1;
            border: 2px solid #ef4444;
        }

        /* Product Info */
        .product-info {
            padding: 1.5rem;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            width: 120px;
        }

        .quantity-controls button {
            width: 32px;
            height: 32px;
            font-size: 1rem;
            border: 1px solid #ddd;
            background-color: #f5f5f5;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .quantity-controls button:hover {
            background-color: #e0e0e0;
        }

        .quantity-controls input {
            width: 40px;
            height: 32px;
            text-align: center;
            font-size: 1rem;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .quantity-controls input:focus {
            outline: none;
            border-color: #ef4444;
        }

        /* Similar Products */
        .similar-products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            padding: 1rem;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .product-grid {
                grid-template-columns: 1fr;
            }

            .main-image {
                height: 300px;
            }

            .thumbnail {
                width: 50px;
                height: 50px;
            }

            .product-info {
                padding: 1rem;
            }

            .quantity-controls {
                width: 100px;
            }
        }

        @media (max-width: 480px) {
            .main-image {
                height: 250px;
            }

            .thumbnail {
                width: 40px;
                height: 40px;
            }

            .similar-products-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <%- include('../user/layout/userHeader.ejs') %>

    <div class="container mx-auto px-4">
        <div class="product-grid">
            <!-- Image Gallery -->
            <div class="image-gallery">
                <div class="main-image-container">
                    <img src="/uploads/<%= product.productImage[0] %>" alt="Smart Watch" class="main-image" id="mainImage">
                    <div class="zoom-overlay" id="zoomOverlay"></div>
                </div>
                <div class="thumbnail-container">
                    <img src="/uploads/<%= product.productImage[1] %>" alt="Watch Side View" class="thumbnail active" data-full="/uploads/<%= product.productImage[1] %>">
                    <img src="/uploads/<%= product.productImage[2] %>" alt="Watch Front View" class="thumbnail" data-full="/uploads/<%= product.productImage[2] %>">
                    <img src="/uploads/<%= product.productImage[3] %>" alt="Watch Back View" class="thumbnail" data-full="/uploads/<%= product.productImage[3] %>">
                </div>
            </div>

            <!-- Product Info -->
            <div class="product-info">
                <div class="flex justify-between items-start mb-4">
                    <div>
                        <h1 class="text-2xl md:text-3xl font-bold text-gray-800"><%= product.productName %></h1>
                        <div class="flex items-center mt-2">
                            <div class="text-yellow-400 mr-2">
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star-half-alt"></i>
                            </div>
                            <span class="text-gray-600 text-sm">(150 Reviews)</span>
                        </div>
                    </div>
                    <button class="wishlist-btn text-gray-500 hover:text-red-500">
                        <i class="far fa-heart text-xl md:text-2xl"></i>
                    </button>
                </div>

                <div class="text-2xl md:text-3xl font-bold text-red-500 mb-4">â‚¹<%= product.salePrice %></div>

                <div class="mb-4">
                    <h3 class="font-semibold text-gray-800 mb-2">Color</h3>
                    <div class="flex space-x-3">
                        <div class="w-8 h-8 rounded-full bg-gray-800 cursor-pointer color-option active border-2 border-transparent hover:border-gray-500"></div>
                        <div class="w-8 h-8 rounded-full bg-red-500 cursor-pointer color-option border-2 border-transparent hover:border-gray-500"></div>
                    </div>
                </div>

                <div class="mb-4">
                    <h3 class="font-semibold text-gray-800 mb-2">Quantity</h3>
                    <div class="quantity-controls">
                        <button class="decrement" data-product-id="<%= product._id %>">-</button>
                        <input type="number" value="1" min="1" data-product-id="<%= product._id %>" product-stock="<%= product.quantity %>" class="update-quantity">
                        <button class="increment" data-product-id="<%= product._id %>">+</button>
                    </div>
                </div>

                <div class="mb-4">
                    <p class="text-gray-700">Total Quantity: <span class="font-bold" product-stock="<%= product.quantity %>"><%= product.quantity %></span></p>
                    <p class="text-gray-700">Status: <span class="font-bold <%= product.status.toLowerCase() === 'in stock' ? 'text-green-600' : 'text-red-600' %>"><%= product.status %></span></p>
                </div>

                <form id="addToCartForm" class="space-y-3">
                    <input type="hidden" name="quantity" id="quantity-input" value="1">
                    <button type="button" id="addToCartButton" class="w-full bg-white border border-red-500 text-red-500 py-3 rounded-md hover:bg-red-500 hover:text-white transition duration-300 text-lg font-semibold">Add To Cart</button>
                    <button class="w-full bg-red-500 text-white py-3 rounded-md hover:bg-red-600 transition duration-300 text-lg font-semibold">Buy Now</button>
                </form>

                <div class="mt-6 bg-gray-100 p-4 rounded-md">
                    <div class="flex items-center mb-2">
                        <i class="fas fa-truck mr-2 text-gray-600"></i>
                        <span class="font-semibold text-gray-800">Free Delivery</span>
                    </div>
                    <p class="text-sm text-gray-600">Enter your postal code for delivery availability</p>
                    <div class="flex items-center mt-4">
                        <i class="fas fa-undo mr-2 text-gray-600"></i>
                        <span class="font-semibold text-gray-800">30-Day Return</span>
                    </div>
                    <p class="text-sm text-gray-600">Hassle-free returns within 30 days</p>
                </div>
            </div>
        </div>

        <!-- Similar Products -->
        <div class="mt-12">
            <h2 class="text-2xl font-bold text-center text-gray-800 mb-6">Similar Products</h2>
            <div class="similar-products-grid">
                <% let count = 0; %>
                <% relatedProducts.forEach(product => { %>
                    <% if (count < 4) { %>
                    <div class="bg-white rounded-lg shadow-md overflow-hidden transform transition hover:scale-105">
                        <img src="/uploads/<%= product.productImage[0] %>" alt="<%= product.productName %>" class="w-full h-40 md:h-48 object-cover">
                        <div class="p-4">
                            <h3 class="font-semibold text-md md:text-lg text-gray-800 mb-2"><%= product.productName %></h3>
                            <div class="flex justify-between items-center">
                                <span class="text-red-500 font-bold text-md md:text-lg">â‚¹<%= product.salePrice %></span>
                                <button class="text-gray-500 hover:text-red-500">
                                    <i class="fas fa-shopping-cart"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <% count++; %>
                    <% } %>
                <% }) %>
            </div>
        </div>
    </div>

    <%- include('../user/layout/userFooter.ejs') %>

    <script>
        // Image Gallery and Zoom
        document.addEventListener('DOMContentLoaded', function() {
            const mainImage = document.getElementById('mainImage');
            const zoomOverlay = document.getElementById('zoomOverlay');
            const thumbnails = document.querySelectorAll('.thumbnail');

            thumbnails.forEach(thumb => {
                thumb.addEventListener('click', function() {
                    thumbnails.forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    mainImage.src = this.getAttribute('data-full');
                });
            });

            mainImage.addEventListener('mousemove', function(e) {
                const rect = this.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                zoomOverlay.style.backgroundImage = `url(${this.src})`;
                zoomOverlay.style.backgroundPosition = `${(x/rect.width * 100)}% ${(y/rect.height * 100)}%`;
                zoomOverlay.style.opacity = '1';
            });

            mainImage.addEventListener('mouseleave', function() {
                zoomOverlay.style.opacity = '0';
            });
        });

        // Color Selector
        document.querySelectorAll('.color-option').forEach(option => {
            option.addEventListener('click', function() {
                document.querySelectorAll('.color-option').forEach(o => o.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Quantity Selector
        document.querySelectorAll('.increment').forEach(button => {
            button.addEventListener('click', async (e) => {
                const productId = e.target.getAttribute('data-product-id');
                const input = document.querySelector(`input[data-product-id="${productId}"]`);
                let currentQuantity = parseInt(input.value, 10);
                const maxStock = parseInt(input.getAttribute('product-stock'), 10);

                const response = await fetch(`/getCartStock/${productId}`);
                const data = await response.json();
                const currentCartQuantity = data.success ? (data.cartQuantity || 0) : 0;
                const maxAddableQuantity = maxStock - currentCartQuantity;

                if (isNaN(currentQuantity) || currentQuantity < 1) currentQuantity = 1;
                const newQuantity = Math.min(currentQuantity + 1, maxAddableQuantity);

                if (newQuantity === currentQuantity) {
                    Swal.fire({ icon: 'warning', title: 'Stock Limit Reached', text: `Only ${maxAddableQuantity} item(s) can be added.` });
                    return;
                }

                input.value = newQuantity;
                updateCart(productId, newQuantity);
            });
        });

        document.querySelectorAll('.decrement').forEach(button => {
            button.addEventListener('click', (e) => {
                const productId = e.target.getAttribute('data-product-id');
                const input = document.querySelector(`input[data-product-id="${productId}"]`);
                let currentQuantity = parseInt(input.value, 10);

                if (isNaN(currentQuantity) || currentQuantity <= 1) {
                    Swal.fire({ icon: 'warning', title: 'Minimum Quantity Reached', text: 'Quantity cannot be less than 1.' });
                    return;
                }

                const newQuantity = currentQuantity - 1;
                input.value = newQuantity;
                updateCart(productId, newQuantity);
            });
        });

        async function updateCart(productId, quantity) {
            try {
                const response = await fetch(`/updateCartQuantityy/${productId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ quantity })
                });
                const data = await response.json();
                if (!data.success) throw new Error(data.message);
            } catch (error) {
                Swal.fire({ icon: 'error', title: 'Update Failed', text: error.message });
            }
        }

        // Wishlist Toggle
        document.querySelector('.wishlist-btn').addEventListener('click', function() {
            this.querySelector('i').classList.toggle('far');
            this.querySelector('i').classList.toggle('fas');
        });

        // Add to Cart
        document.getElementById('addToCartButton').addEventListener('click', async function() {
            const quantityInput = document.querySelector('.update-quantity');
            const productId = quantityInput.getAttribute('data-product-id');
            const quantity = quantityInput.value;

            try {
                const response = await fetch(`/addToCart/${productId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ quantity })
                });
                const result = await response.json();

                if (response.ok) {
                    Swal.fire({ title: 'Success!', text: result.message || 'Product added to cart!', icon: 'success', timer: 2000 });
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                Swal.fire({ title: 'Error!', text: error.message || 'An unexpected error occurred.', icon: 'error' });
            }
        });
    </script>
</body>
</html>