<%- include('../user/layout/userHeader.ejs') %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Tracking | Your Store</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        :root {
            --primary-color: #3b82f6;
            --success-color: #10b981;
            --text-dark: #1f2937;
            --text-light: #6b7280;
            --cancel-color: #ef4444;
        }
        .progress-step.completed {
            background-color: var(--success-color);
            color: white;
            border-color: var(--success-color);
        }
        .progress-step.active {
            border-color: var(--primary-color);
            color: var(--primary-color);
        }
        .progress-step.cancelled {
            background-color: var(--cancel-color);
            color: white;
            border-color: var(--cancel-color);
        }
        @media (max-width: 640px) {
            .order-details {
                flex-direction: column;
            }
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-900 antialiased">
    <div class="container mx-auto px-4 py-8 max-w-4xl">

        <section class="order-progress bg-white shadow-md rounded-lg p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-700 mb-6">Order Progress</h2>
            <div class="flex items-center justify-between progress-container">
                <div class="flex-1 flex items-center order-progress-step">
                    <div class="progress-step <%= order.orderStatus === 'Ordered' ? 'completed' : '' %> rounded-full h-12 w-12 flex items-center justify-center border-2 text-lg font-bold">
                        1
                    </div>
                    <div class="flex-1 h-1.5 <%= ['Shipped', 'Out For Delivery', 'Delivered', 'Cancelled'].includes(order.orderStatus) ? 'bg-green-500' : 'bg-gray-300' %> mx-2"></div>
                </div>
                <div class="flex-1 flex items-center order-progress-step">
                    <div class="progress-step <%= ['Shipped', 'Out For Delivery', 'Delivered', 'Cancelled'].includes(order.orderStatus) ? 'completed' : order.orderStatus === 'Ordered' ? 'active' : '' %> rounded-full h-12 w-12 flex items-center justify-center border-2 text-lg font-bold">
                        2
                    </div>
                    <div class="flex-1 h-1.5 <%= ['Out For Delivery', 'Delivered', 'Cancelled'].includes(order.orderStatus) ? 'bg-green-500' : 'bg-gray-300' %> mx-2"></div>
                </div>
                <div class="flex-1 flex items-center order-progress-step">
                    <div class="progress-step <%= ['Out For Delivery', 'Delivered', 'Cancelled'].includes(order.orderStatus) ? 'completed' : '' %> rounded-full h-12 w-12 flex items-center justify-center border-2 text-lg font-bold">
                        3
                    </div>
                    <div class="flex-1 h-1.5 <%= ['Delivered', 'Cancelled'].includes(order.orderStatus) ? 'bg-green-500' : 'bg-gray-300' %> mx-2"></div>
                </div>
                <div class="order-progress-step">
                    <div class="progress-step <%= order.orderStatus === 'Delivered' ? 'completed' : order.orderStatus === 'Cancelled' ? 'cancelled' : ''  %> rounded-full h-12 w-12 flex items-center justify-center border-2 text-lg font-bold">
                        4
                    </div>
                </div>
            </div>
            <div class="flex justify-between text-sm mt-4">
                <span class="text-green-500 font-medium">Order Placed</span>
                <span class="text-blue-500 font-medium">Shipped</span>
                <span class="text-blue-500 font-medium">Out For Delivery</span>
                <span class="text-gray-400 font-medium"><%= order.orderStatus === 'Cancelled' ? 'Cancelled' : 'Delivered' %></span>
            </div>
        </section>

        <div class="order-details grid md:grid-cols-2 gap-8">
            <section class="bg-white shadow-md rounded-lg p-6">
                <h2 class="text-xl font-semibold text-gray-700 mb-6">Order Items</h2>
                <div class="space-y-6">
                    <% order.items.forEach(item => { %>
                        <div class="flex items-center space-x-4 product-item">
                            <img src="/uploads/<%= item.productId.productImage[0] %>" alt="Product" class="h-24 w-24 rounded-lg object-cover">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-800"><%= item.productId.name %></h3>
                                <p class="text-gray-500 text-sm">Quantity: <%= item.quantity %></p>
                                <p class="text-blue-600 font-medium">$<%= item.price.toFixed(2) %></p>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </section>

            <div class="space-y-8">
                <section class="bg-white shadow-md rounded-lg p-6">
                    <h2 class="text-xl font-semibold text-gray-700 mb-6">Order Summary</h2>
                    <div class="space-y-4">
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">Subtotal</span>
                            <span class="text-gray-800 font-medium">₹<%= order.totalAmount.toFixed(2) %></span>
                        </div>
                       
                       
                        <hr class="border-gray-200">
                        <div class="flex justify-between items-center font-bold">
                            <span class="text-gray-900">Total</span>
                            <span class="text-blue-600 text-xl">₹<%= order.totalAmount .toFixed(2) %></span>
                        </div>
                        <div class="mt-6">
                            <% if (order.orderStatus === 'Delivered' || order.paymentMethod==="paypal") { %>
                                <a 
                                    href="/invoice/<%= order._id %>" 
                                    class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600">
                                    Download Invoice
                                </a>
                            <% } else { %>
                                <p class="text-gray-500">Invoice will be available once the order is delivered.</p>
                            <% } %>
                        </div>
                        
                    </div>
                
                    <!-- Display Cancel/Return Details if the order is canceled or returned -->
                    <% if (order.orderStatus === 'Cancelled' || order.orderStatus === 'Approved' || order.orderStatus === 'Returned' || order.orderStatus === 'Failed') { %>
                        <div class="mt-6">
                          <h3 class="text-lg font-semibold text-gray-800">
                            <%= order.orderStatus === 'Cancelled' ? 'Cancellation' : order.orderStatus === 'Failed' ? 'Failure' : 'Return' %> Details
                          </h3>
                          <% if (order.cancelOrder) { %>
                            <p><strong>Reason:</strong> <%= order.cancelOrder.reason || 'No reason provided' %></p>
                            <% if (order.paymentMethod !== 'cod' || order.orderStatus === 'Returned') { %>
                              <p><strong>Total Refund:</strong> ₹<%= order.cancelOrder.totalRefund.toFixed(2) %></p>
                              <h4 class="text-md font-semibold mt-4" style="color: <%= order.orderStatus === 'Failed' ? 'red' : 'green' %>;">
                                Refund <%= order.orderStatus === 'Failed' ? 'failed' : 'successfully completed' %>
                              </h4>
                            <% } %>
                            <p><strong>Date:</strong> <%= new Date(order.cancelOrder.cancelDate).toLocaleDateString() %></p>
                            
                            <% if (order.cancelOrder.canceledItems && order.cancelOrder.canceledItems.length > 0) { %>
                              <h4 class="text-md font-semibold mt-4" style="color: <%= order.orderStatus === 'Failed' ? 'red' : 'green' %>;">
                                Your request has been <%= order.orderStatus === 'Failed' ? 'unsuccessful' : 'successfully completed' %>
                              </h4>
                              <ul class="mt-2">
                                <% order.cancelOrder.canceledItems.forEach(item => { %>
                                  <li class="flex justify-between items-center py-2">
                                    <span>
                                      <%= item.productId.productName %> (x<%= item.quantity %>)
                                    </span>
                                    <span class="text-gray-500">
                                        ₹<%= order.cancelOrder.totalRefund.toFixed(2) %>
                                    </span>
                                  </li>
                                <% }); %>
                              </ul>
                            <% } %>
                          <% } else { %>
                            <p>No cancellation/return/failure details available</p>
                          <% } %>
                        </div>
                      <% } else if (order.orderStatus === 'Pending') { %>
                        <div class="mt-6">
                          <h3 class="text-lg font-semibold text-gray-800">Refund Status</h3>
                          <p class="text-yellow-600"><strong>Note:</strong> Your refund amount is pending. Please allow 5-7 business days for processing.</p>
                        </div>
                      <% } %>
                      

                      
                      
                      
                      
                
                    <!-- Disable buttons after the order is canceled or returned -->
                    <button 
                    class="mt-6 w-full <%= 
                        order.orderStatus === 'Delivered' ? 'bg-green-500 hover:bg-green-600' : 
                        order.orderStatus === 'payment-Retry' ? 'bg-blue-500 hover:bg-blue-600' :
                        'bg-red-500 hover:bg-red-600' 
                    %> text-white py-3 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-opacity-50"
                    <% if (order.orderStatus === 'Cancelled' || order.orderStatus === 'Returned' || order.orderStatus === 'Failed') { %> disabled <% } %>
                    onclick="<%= order.orderStatus === 'payment-Retry' ? 'retryPayment(' + JSON.stringify(order) + ')' : 'openCancelModal(' + JSON.stringify(order) + ')' %>">
                    <%= 
                        order.orderStatus === 'Delivered' ? 'Return Order' : 
                        order.orderStatus === 'payment-Retry' ? 'Retry Payment' :
                        'Cancel Order' 
                    %>
                </button>
                
                
                
                

                
                <div id="cancelModal" class="hidden fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center">
                    <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-lg">
                        <div class="flex justify-between items-center mb-4">
                            <h2 id="modalTitle" class="text-xl font-semibold"></h2>
                            <button id="closeCancelModal" class="text-gray-500 hover:text-gray-800">&times;</button>
                        </div>
                        <form id="cancelForm">
                            <div id="cancelItemsContainer" class="space-y-4"></div>
                            <textarea id="reasonInput" class="w-full border rounded-lg p-2 mt-4 hidden" placeholder="Reason for return"></textarea>
                            <button type="submit" class="mt-4 w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700">
                                <span id="submitButtonText"></span>
                            </button>
                        </form>
                    </div>
                </div>
                </section>

                <section class="bg-white shadow-md rounded-lg p-6">
                    <h2 class="text-xl font-semibold text-gray-700 mb-6">Shipping Details</h2>
                    <address class="not-italic text-gray-600">
                        <p class="font-semibold"><%= order.deliveryAddress.fullName %></p>
                        <p><%= order.deliveryAddress.addressLine1 %></p>
                        <p><%= order.deliveryAddress.addressLine2 %></p>
                        <p><%= order.deliveryAddress.email %></p>
                        <p><%= order.deliveryAddress.state %></p>
                        <p><%= order.deliveryAddress.city %></p>
                        <p class="mt-2">Phone: <a href="tel:+<%= order.deliveryAddress.phone %>" class="text-blue-600">+<%= order.deliveryAddress.phone %></a></p>
                    </address>
                </section>
            </div>
        </div>
    </div>

    

    <script>

let currentOrder = null;  // Declare a global variable to store the order

function openCancelModal(order) {
    currentOrder = order;  // Store the order object in the global variable

    const cancelModal = document.getElementById('cancelModal');
    const cancelItemsContainer = document.getElementById('cancelItemsContainer');
    const modalTitle = document.getElementById('modalTitle');
    const reasonInput = document.getElementById('reasonInput');
    const submitButtonText = document.getElementById('submitButtonText');

    cancelItemsContainer.innerHTML = '';
    modalTitle.textContent = order.orderStatus === 'Delivered' ? 'Return Items' : 'Cancel Items';
    submitButtonText.textContent = order.orderStatus === 'Delivered' ? 'Return Items' : 'Cancel Items';
    reasonInput.classList.toggle('hidden', order.orderStatus !== 'Delivered');

    order.items.forEach((item) => {
        cancelItemsContainer.innerHTML += `
            <div class="flex items-center space-x-4">
                <input type="checkbox" name="selectedProduct" id="product-${item.productId._id}" value="${item.productId._id}" data-max-quantity="${item.quantity}" class="form-checkbox h-5 w-5 text-blue-600">
                <label for="product-${item.productId._id}" class="flex items-center space-x-4 cursor-pointer">
                    <img src="/uploads/${item.productId.productImage[0]}" alt="Product" class="h-12 w-12 rounded-lg">
                    <div>
                        <h3 class="text-lg font-semibold text-gray-800">${item.productId.productName}</h3>
                        <p class="text-gray-500 text-sm">Available: ${item.quantity}</p>
                    </div>
                </label>
                <input type="number" id="quantity-${item.productId._id}" class="w-20 border rounded-lg p-2 hidden" min="1" max="${item.quantity}" placeholder="Qty">
            </div>
        `;
    });

    const productCheckboxes = document.querySelectorAll('input[name="selectedProduct"]');
    productCheckboxes.forEach((checkbox) => {
        checkbox.addEventListener('change', (e) => {
            const quantityInput = document.getElementById(`quantity-${e.target.value}`);
            if (e.target.checked) {
                quantityInput.classList.remove('hidden');
            } else {
                quantityInput.classList.add('hidden');
                quantityInput.value = '';
            }
        });
    });

    const closeModal = document.getElementById('closeCancelModal');
    closeModal.addEventListener('click', () => {
        cancelModal.classList.add('hidden');
    });

    cancelModal.classList.remove('hidden');
}


document.getElementById('cancelForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    if (!currentOrder) {
        console.error('Order not found');
        return;
    }

    const selectedProducts = document.querySelectorAll('input[name="selectedProduct"]:checked');
    if (selectedProducts.length === 0) {
        Swal.fire({
            icon: 'warning',
            title: 'No products selected',
            text: 'Please select at least one product.',
        });
        return;
    }

    const canceledItems = [];
    let isValid = true;

    selectedProducts.forEach((checkbox) => {
        const quantityInput = document.getElementById(`quantity-${checkbox.value}`);
        const quantity = parseInt(quantityInput.value, 10);
        const maxQuantity = parseInt(checkbox.getAttribute('data-max-quantity'), 10);

        if (!quantity || quantity < 1 || quantity > maxQuantity) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid quantity',
                text: `Invalid quantity for product: ${checkbox.value}. Maximum available: ${maxQuantity}`,
            });
            isValid = false;
            return;
        }

        canceledItems.push({
            productId: checkbox.value,
            quantity,
        });
    });

    if (!isValid) return;

    const reason = document.getElementById('reasonInput').value;
    console.log("reason", reason);

    // Determine the action based on the order status
    const action = currentOrder.orderStatus === 'Delivered' ? 'return' : 'cancel';

    try {
        const url = `/${action}/${currentOrder._id}`;
console.log("Request URL:", url);  // Log the request URL

const response = await fetch(url, {
    method: 'PUT',
    headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${localStorage.getItem('token')}`,
    },
    body: JSON.stringify({ canceledItems, reason }),
});

const result = await response.text();
console.log("Response:", result);  // Log the response body



        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: `${action.charAt(0).toUpperCase() + action.slice(1)} Successful`,
                text: result.message,
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: `Failed to ${action} order`,
                text: result.message || 'An error occurred.',
            });
        }
    } catch (error) {
        console.error('Error processing request:', error);
        Swal.fire({
            icon: 'error',
            title: 'An error occurred',
            text: 'An error occurred while processing your request.',
        });
    }
});


async function retryPayment(order) {
  try {
    // Check if order data is valid
    if (!order || !order._id || !order.totalAmount) {
      throw new Error('Invalid order data');
    }

    // Prepare the order data to be sent to the server
    const orderData = {
      orderId: order._id,  // Assuming the order has an _id field
      amount: order.totalAmount,  // Assuming the total amount field exists
      currency: order.currency || 'INR',  // Default to INR if no currency is provided
    };

    console.log("orderData:",orderData);

    // Send the fetch request to create the PayPal payment
    const response = await fetch('/createPayPalPayments', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(orderData),
    });
console.log("res",response)
    // Check if the response is valid
    if (!response.ok) {
      const result = await response.json();
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: result.error || 'Failed to initiate PayPal payment.',
      });
      return;
    }

    const result = await response.json();
    console.log("result", result);

    // Redirect to PayPal approval URL
    if (result.approvalUrl) {
      console.log("Redirecting to PayPal:", result.approvalUrl);
      window.location.href = result.approvalUrl;  // Redirect to PayPal for approval
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'No approval URL returned from PayPal.',
      });
    }
  } catch (err) {
    // Handle any unexpected errors
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: err.message || 'An error occurred. Please try again.',
    });
    console.error("Error initiating payment:", err);
  }
}



    </script>
</body>
</html>

<%- include('../user/layout/userFooter.ejs') %>
