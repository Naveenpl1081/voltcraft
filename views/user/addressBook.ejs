<%- include('../user/layout/userHeader.ejs') %>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Address Book</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }

    body {
      background-color: #f5f5f5;
      color: #333;
      line-height: 1.6;
    }

    .container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 1rem;
      display: flex;
      gap: 2rem;
    }

    /* Sidebar */
    .sidebar {
      width: 300px;
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      padding: 2rem;
      position: sticky;
      top: 2rem;
      height: fit-content;
    }

    .sidebar-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .sidebar-header img {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: #ef4444;
    }

    .sidebar-header h3 {
      font-size: 1.25rem;
      font-weight: 600;
      color: #333;
    }

    .sidebar-links {
      list-style: none;
    }

    .sidebar-links li {
      margin-bottom: 1rem;
    }

    .sidebar-links a {
      text-decoration: none;
      color: #555;
      font-size: 1rem;
      display: flex;
      align-items: center;
      gap: 0.75rem;
      transition: color 0.3s ease;
    }

    .sidebar-links a.active, .sidebar-links a:hover {
      color: #ef4444;
      font-weight: 500;
    }

    .add-new-btn {
      width: 100%;
      background: #ef4444;
      color: #fff;
      padding: 0.75rem;
      border: none;
      border-radius: 5px;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: background 0.3s ease;
      margin-bottom: 1.5rem;
    }

    .add-new-btn:hover {
      background: #dc2626;
    }

    /* Content */
    .content {
      flex: 1;
      padding: 1rem;
    }

    .content-header {
      background: #fff;
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      margin-bottom: 2rem;
    }

    .content-header h1 {
      font-size: 1.75rem;
      font-weight: 600;
      color: #333;
    }

    .content-header p {
      color: #666;
      font-size: 1rem;
      margin-top: 0.5rem;
    }

    .address-card {
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .address-card:hover {
      border: 1px solid #ef4444;
      box-shadow: 0 0 10px rgba(239, 68, 68, 0.2);
    }

    .address-card h3 {
      font-size: 1.25rem;
      font-weight: 600;
      color: #333;
      margin-bottom: 1rem;
    }

    .address-details {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
    }

    .address-details p {
      font-size: 0.9rem;
      color: #555;
      margin-bottom: 0.5rem;
    }

    .address-actions {
      display: flex;
      gap: 0.75rem;
    }

    .address-actions a, .address-actions button {
      padding: 0.5rem 1rem;
      border: 1px solid #ef4444;
      background: #fff;
      color: #ef4444;
      border-radius: 5px;
      font-size: 0.9rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      text-decoration: none;
    }

    .address-actions a:hover, .address-actions button:hover {
      background: #ef4444;
      color: #fff;
    }

    .form-card {
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      padding: 2rem;
      margin-top: 2rem;
      display: none;
    }

    .form-card.active {
      display: block;
    }

    .form-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
    }

    .form-group {
      display: flex;
      flex-direction: column;
    }

    .form-group label {
      font-size: 0.9rem;
      color: #666;
      margin-bottom: 0.5rem;
    }

    .form-group input {
      padding: 0.75rem;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 1rem;
      transition: border-color 0.3s ease;
    }

    .form-group input:focus {
      border-color: #ef4444;
      outline: none;
      box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.2);
    }

    .error-message {
      color: #ef4444;
      font-size: 0.8rem;
      margin-top: 0.25rem;
      display: none;
    }

    .actions {
      display: flex;
      justify-content: flex-end;
      gap: 1rem;
      margin-top: 2rem;
    }

    .actions button {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 5px;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .cancel-button {
      background: #f5f5f5;
      color: #666;
    }

    .cancel-button:hover {
      background: #e5e5e5;
    }

    .save-button {
      background: #ef4444;
      color: #fff;
    }

    .save-button:hover {
      background: #dc2626;
    }

    /* Hamburger Menu */
    .hamburger {
      display: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: #333;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .container {
        flex-direction: column;
        padding: 0.5rem;
      }

      .sidebar {
        width: 100%;
        border-right: none;
        position: relative;
        padding: 1rem;
        box-shadow: none;
      }

      .sidebar-header {
        display: none;
      }

      .sidebar-links {
        display: none;
      }

      .sidebar-links.active {
        display: block;
      }

      .hamburger {
        display: block;
      }

      .content-header {
        padding: 1rem;
      }

      .content-header h1 {
        font-size: 1.5rem;
      }

      .form-grid {
        grid-template-columns: 1fr;
      }

      .address-details {
        flex-direction: column;
        gap: 1rem;
      }

      .address-actions {
        justify-content: flex-start;
      }
    }

    @media (max-width: 480px) {
      .content-header h1 {
        font-size: 1.25rem;
      }

      .address-card h3 {
        font-size: 1.1rem;
      }

      .address-details p {
        font-size: 0.85rem;
      }

      .address-actions a, .address-actions button {
        font-size: 0.8rem;
        padding: 0.4rem 0.8rem;
      }

      .form-group input {
        font-size: 0.9rem;
        padding: 0.5rem;
      }

      .actions button {
        font-size: 0.9rem;
        padding: 0.5rem 1rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Sidebar -->
    <div class="sidebar">
      <div class="sidebar-header">
        <img src="https://via.placeholder.com/50" alt="Profile Picture">
       
      </div>
      <div class="hamburger"><i class="fas fa-bars"></i></div>
      <button class="add-new-btn" id="addNewAddressButton">Add New Address</button>
      <ul class="sidebar-links">
        <li><a href="/profile"><i class="fas fa-user"></i> My Profile</a></li>
        <li><a href="/addressbook" class="active"><i class="fas fa-address-book"></i> Address Book</a></li>
        <li><a href="#"><i class="fas fa-credit-card"></i> My Payment Options</a></li>
        <li><a href="#"><i class="fas fa-lock"></i> Change Password</a></li>
        <li><a href="/myorder"><i class="fas fa-shopping-bag"></i> My Orders</a></li>
        <li><a href="#"><i class="fas fa-undo"></i> My Returns</a></li>
        <li><a href="#"><i class="fas fa-ban"></i> My Cancellations</a></li>
        <li><a href="#"><i class="fas fa-heart"></i> My Wishlist</a></li>
      </ul>
    </div>

    <!-- Content -->
    <div class="content">
      <div class="content-header">
       
        <p>Manage your addresses below.</p>
      </div>

      <!-- Recent Addresses -->
      <% if (recentAddress.length > 0) { %>
        <% recentAddress.forEach((address) => { %>
          <div class="address-card" id="recentAddress-<%= address._id %>">
            <h3><%= address.fullName %></h3>
            <div class="address-details">
              <div>
                <p><strong>Phone:</strong> <%= address.phone %></p>
                <p><strong>Address:</strong> <%= address.addressLine1 %>, <%= address.addressLine2 %></p>
                <p><strong>City:</strong> <%= address.city %></p>
                <p><strong>State:</strong> <%= address.state %></p>
                <p><strong>Country:</strong> <%= address.country %></p>
                <p><strong>Email:</strong> <%= address.email %></p>
              </div>
              <div class="address-actions">
                <a href="/editAddress?id=<%= address._id %>"><i class="fas fa-edit"></i> Edit</a>
                <button onclick="deleteAddress('<%= address._id %>')"><i class="fas fa-trash-alt"></i> Delete</button>
              </div>
            </div>
          </div>
        <% }) %>
      <% } else { %>
        <p style="color: #666; text-align: center;">No addresses found. Add a new address to get started.</p>
      <% } %>

      <!-- Add Address Form -->
      <div class="form-card" id="addAddressForm">
        <h2>Add New Address</h2>
        <form id="addressForm">
          <div class="form-grid">
            <div class="form-group">
              <label for="full-name">Full Name</label>
              <input type="text" id="full-name" name="name" placeholder="Enter your full name">
              <span id="name-error" class="error-message"></span>
            </div>
            <div class="form-group">
              <label for="phonee">Phone Number</label>
              <input type="text" id="phonee" name="number" placeholder="Enter your phone number">
              <span id="phone-error" class="error-message"></span>
            </div>
            <div class="form-group">
              <label for="address-line1">Street Address</label>
              <input type="text" id="address-line1" name="addressone" placeholder="House number, Street name">
              <span id="address-line1-error" class="error-message"></span>
            </div>
            <div class="form-group">
              <label for="address-line2">Apartment, floor, etc.</label>
              <input type="text" id="address-line2" name="addresstwo" placeholder="Apartment, Suite, etc. (optional)">
              <span id="address-line2-error" class="error-message"></span>
            </div>
            <div class="form-group">
              <label for="cityy">Town/City</label>
              <input type="text" id="cityy" name="city" placeholder="Enter your city">
              <span id="city-error" class="error-message"></span>
            </div>
            <div class="form-group">
              <label for="statee">State</label>
              <input type="text" id="statee" name="state" placeholder="Enter your state">
              <span id="state-error" class="error-message"></span>
            </div>
            <div class="form-group">
              <label for="zip-code">Email Address</label>
              <input type="text" id="zip-code" name="email" placeholder="Enter your email">
              <span id="zip-code-error" class="error-message"></span>
            </div>
            <div class="form-group">
              <label for="countryy">Country</label>
              <input type="text" id="countryy" name="country" placeholder="Enter your country">
              <span id="country-error" class="error-message"></span>
            </div>
          </div>
          <div class="actions">
            <button type="button" class="cancel-button" onclick="toggleForm()">Cancel</button>
            <button type="submit" class="save-button">Save Address</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <%- include('../user/layout/userFooter.ejs') %>

  <script>
    // Hamburger Menu Toggle
    document.querySelector('.hamburger').addEventListener('click', () => {
      document.querySelector('.sidebar-links').classList.toggle('active');
    });

    // Toggle Add Address Form
    document.getElementById("addNewAddressButton").addEventListener("click", () => {
      toggleForm();
    });

    function toggleForm() {
      const form = document.getElementById("addAddressForm");
      form.classList.toggle('active');
      if (form.classList.contains('active')) {
        form.scrollIntoView({ behavior: "smooth" });
      }
    }

    // Form Submission
    document.getElementById("addressForm").addEventListener("submit", async (event) => {
      event.preventDefault();

      const name = document.getElementById("full-name").value;
      const phone = document.getElementById("phonee").value;
      const addressLine1 = document.getElementById("address-line1").value;
      const addressLine2 = document.getElementById("address-line2").value;
      const city = document.getElementById("cityy").value;
      const state = document.getElementById("statee").value;
      const email = document.getElementById("zip-code").value;
      const country = document.getElementById("countryy").value;

      const phoneRegex = /^[6-9]\d{9}$/;
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

      document.querySelectorAll(".error-message").forEach((msg) => msg.style.display = "none");

      let isValid = true;

      if (!name) {
        document.getElementById("name-error").innerText = "Full name is required.";
        document.getElementById("name-error").style.display = "block";
        isValid = false;
      } else if (!/^[A-Za-z\s]+$/.test(name)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Name',
          text: 'Name can only contain letters and spaces.',
          confirmButtonText: 'OK',
        });
        return;
      }

      if (!phone || !phoneRegex.test(phone)) {
        document.getElementById("phone-error").innerText = "Enter a valid 10-digit phone number starting with 6-9.";
        document.getElementById("phone-error").style.display = "block";
        isValid = false;
      }

      if (!addressLine1) {
        document.getElementById("address-line1-error").innerText = "Street address is required.";
        document.getElementById("address-line1-error").style.display = "block";
        isValid = false;
      }

      if (!city) {
        document.getElementById("city-error").innerText = "City is required.";
        document.getElementById("city-error").style.display = "block";
        isValid = false;
      }

      if (!state) {
        document.getElementById("state-error").innerText = "State is required.";
        document.getElementById("state-error").style.display = "block";
        isValid = false;
      }

      if (!email || !emailRegex.test(email)) {
        document.getElementById("zip-code-error").innerText = "Enter a valid email address.";
        document.getElementById("zip-code-error").style.display = "block";
        isValid = false;
      }

      if (!country) {
        document.getElementById("country-error").innerText = "Country is required.";
        document.getElementById("country-error").style.display = "block";
        isValid = false;
      }

      if (!isValid) return;

      const formData = {
        name,
        number: phone,
        addressone: addressLine1,
        addresstwo: addressLine2,
        city,
        state,
        email,
        country
      };

      try {
        const response = await fetch("/addressverify", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(formData)
        });

        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'Address saved successfully!',
            confirmButtonText: 'OK'
          }).then(() => {
            window.location.href = "/addressverifyy";
          });
        } else {
          const error = await response.json();
          Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: error.message || 'Something went wrong!',
            confirmButtonText: 'OK'
          });
        }
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: 'Error submitting the form: ' + error.message,
          confirmButtonText: 'OK'
        });
      }
    });

    // Delete Address
    async function deleteAddress(addressId) {
      const result = await Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#ef4444',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch(`/deleteAddress/${addressId}`, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
          });

          if (response.ok) {
            Swal.fire('Deleted!', 'Your address has been deleted.', 'success');
            document.getElementById(`recentAddress-${addressId}`).remove();
          } else {
            const errorData = await response.json();
            Swal.fire('Error!', `Failed to delete address: ${errorData.error || "Unknown error"}`, 'error');
          }
        } catch (error) {
          Swal.fire('Error!', 'An error occurred. Please try again.', 'error');
        }
      }
    }
  </script>
</body>
</html>
<%- include('../user/layout/userFooter.ejs') %>