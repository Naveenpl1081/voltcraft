<%- include('../layouts/adminheader') %>
 
<section class="content-main">
    <div class="content-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2 class="content-title card-title">Products Management</h2>
                <p>List of all products in your inventory</p>
                <form class="search-form">
                    <div class="input-group">
                        <input type="text" placeholder="Search products" name="search" id="search" class="form-control search-input">
                        <button type="submit" class="btn btn-primary search-button">
                            <i class="fa fa-search"></i>
                        </button>
                    </div>
                </form>
            </div>
            <div>
                <a href="/admin/addProduct" class="btn btn-primary">
                    <i class="fa fa-plus"></i> Add New Product
                </a>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-12">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <% if(typeof products !== 'undefined' && products.length > 0) { %>
                            <thead>
                                <tr>
                                    <th>S.No</th>
                                    <th>Image</th>
                                    <th>Product Name</th>
                                    <th>Quantity</th>
                                    <th>Category</th>
                                    <th>regularPrice</th>
                                    <th>salePrice</th>
                                    <th>Color</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                    <th>Delete/restore</th>
                                </tr>
                            </thead>
                            <tbody id="productsTableBody">
                                <% if (products.length > 0) { %>
                                    <% products.forEach((product, index) => { %>
                                        <tr>
                                            <td><%= index + 1 %></td>
                                            <td>
                                                <img 
                                                    width="90px" 
                                                    height="90px" 
                                                    class="rounded-3"
                                                    src="/uploads/<%= product.productImage && product.productImage.length > 0 ? product.productImage[0] : 'default-product.jpg' %>" 
                                                    alt="Product Image"
                                                >
                                            </td>
        
                                            <td><%= product.productName %></td>
                                            <td><%= product.quantity || 0 %></td>
                                            <td><%= product.category && product.category.name ? product.category.name : "no cat" %></td>
                                            <td>₹<%= product.regularPrice || 0 %></td>
                                            <td>₹<%= product.salePrice || 0 %></td>
                                            <td><%= product.color || 'N/A' %></td>
                                            <td class="text-center">
                                                <% if (product.isBlocked === true) { %>
                                                   Blocked
                                                <% } else { %>
                                                    unBlocked
                                            </td>
                                            <% } %>
                                            <td class="text-center">
                                                <a href="/admin/editproduct?id=<%= product._id %>">
                                                    <button type="button" class="btn btn-primary">Edit</button>
                                                </a>
                                            </td>
                                            <td class="text-center">
                                                <% if (product.isBlocked) { %>
                                                    <button 
                                                        type="button" 
                                                        class="btn btn-warning restore-category-btn" 
                                                        data-product-id="<%= product._id %>"
                                                        onclick="restoreProduct(this)">
                                                        Restore
                                                    </button>
                                                <% } else { %>
                                                    <button 
                                                        type="button" 
                                                        class="btn btn-danger delete-category-btn" 
                                                        data-product-id="<%= product._id %>"
                                                        onclick="deleteProduct(this)">
                                                        Delete
                                                    </button>
                                                <% } %>
                                            </td>
                                            
                                        </tr>
                                    <% }); %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="5" class="text-center">No product found</td>
                                    </tr>
                                <% } %>
                            </tbody>
                            <% } else { %>
                            <tr>
                                <td colspan="9" class="text-center">
                                    <h4>No products available</h4>
                                </td>
                            </tr>
                            <% } %>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <section class="pagination-section">
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <% if (currentPage > 1) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage - 1 %>&limit=<%= limit %>" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                <% } %>
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>&limit=<%= limit %>"><%= i %></a>
                    </li>
                <% } %>
                <% if (currentPage < totalPages) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage + 1 %>&limit=<%= limit %>" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                <% } %>
            </ul>
        </nav>
    </section>
    
    <!-- Rest of the existing code remains the same -->
</section>

<%- include('../layouts/Adminfooter') %>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const searchInput = document.getElementById('search');
    const productsTableBody = document.getElementById('productsTableBody');

    if (searchInput && productsTableBody) {
        const allProductRows = productsTableBody.getElementsByTagName('tr');

        searchInput.addEventListener('input', function () {
            const searchText = searchInput.value.toLowerCase();

            for (let i = 0; i < allProductRows.length; i++) {
                const productRow = allProductRows[i];
                const productName = productRow.getElementsByTagName('td')[2].innerText.toLowerCase();

                if (productName.includes(searchText)) {
                    productRow.style.display = '';
                } else {
                    productRow.style.display = 'none';
                }
            }
        });
    }
});
async function toggleBlockUnblock(element) {
    const productId = element.getAttribute('data-product-id');
    const action = element.getAttribute('data-action');

    try {
        const response = await fetch(`/admin/blockProduct/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (!response.ok) {
            throw new Error('Failed to update product status');
        }

        const responseData = await response.json();

        if (responseData.success) {
            // Toggle button text and class
            if (action === 'block') {
                element.setAttribute('data-action', 'unblock');
                element.classList.remove('bg-danger');
                element.classList.add('bg-success');
                element.innerText = 'Unblock';
            } else {
                element.setAttribute('data-action', 'block');
                element.classList.remove('bg-success');
                element.classList.add('bg-danger');
                element.innerText = 'Block';
            }

            alert(responseData.message);
        } else {
            throw new Error(responseData.message || 'An error occurred');
        }
    } catch (error) {
        console.error('Error toggling product status:', error);
        alert('Failed to update product status. Please try again.');
    }
}

function confirmDeleteProduct(element) {
    const productId = element.getAttribute('data-product-id');
    const productRow = document.getElementById(`product-row-${productId}`);
    const productName = productRow.querySelector('td:nth-child(3)').innerText;

    // Create a custom confirmation dialog
    const confirmDialog = document.createElement('div');
    confirmDialog.innerHTML = `
        <div class="modal" tabindex="-1" style="display: block; background: rgba(0,0,0,0.5); position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 1000;">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the product "<strong>${productName}</strong>"?</p>
                        <p>This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary cancel-delete">Cancel</button>
                        <button type="button" class="btn btn-danger confirm-delete">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    document.body.appendChild(confirmDialog);

    const cancelButton = confirmDialog.querySelector('.cancel-delete');
    const confirmButton = confirmDialog.querySelector('.confirm-delete');

    cancelButton.addEventListener('click', () => {
        document.body.removeChild(confirmDialog);
    });

    confirmButton.addEventListener('click', async () => {
        try {
            const response = await fetch(`/admin/deleteProduct/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Failed to delete product');
            }

            const responseData = await response.json();
            if (responseData.success) {
                // Remove the product row from the table
                productRow.remove();
                document.body.removeChild(confirmDialog);
                
                // Optional: Show a toast or notification
                const notification = document.createElement('div');
                notification.className = 'alert alert-success fixed-top text-center';
                notification.style.zIndex = '1050';
                notification.innerText = `Product "${productName}" has been successfully deleted.`;
                document.body.appendChild(notification);
                
                // Auto-remove notification after 3 seconds
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 3000);
            } else {
                throw new Error(responseData.error || 'Unknown error occurred');
            }
        } catch (error) {
            console.error('Error deleting product:', error);
            document.body.removeChild(confirmDialog);
            alert('Failed to delete product. Please try again.');
        }
    });
}

async function deleteProduct(button) {
    const productId = button.getAttribute('data-product-id');
    console.log("proID:",productId)
    if (confirm('Are you sure you want to delete this product?')) {
        try {
            const response = await fetch(`/admin/deleteProduct/${productId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (!response.ok) {
                throw new Error('Failed to delete product');
            }

            const result = await response.json();

            if (result.success) {
                // Remove the row from the table
                button.closest('tr').remove();
                alert('product deleted successfully');
                window.location.reload();
            } else {
                alert(result.error || 'An error occurred while deleting the product');
            }
        } catch (error) {
            console.error('Error deleting product:', error);
            alert('Failed to delete the product. Please try again.');
        }
    }
}

async function restoreProduct(button) {
    const productId = button.getAttribute("data-product-id");

    if (confirm("Are you sure you want to restore this product?")) {
        try {
            const response = await fetch(`/admin/restoreProduct/${productId}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
            });

            if (!response.ok) {
                throw new Error("Failed to restore product");
            }

            const result = await response.json();

            if (result.success) {
                // Optionally reload the page or update the row
                location.reload(); // Reload to reflect changes
                alert("Product restored successfully");
            } else {
                alert(result.error || "An error occurred while restoring the product");
            }
        } catch (error) {
            console.error("Error restoring product:", error);
            alert("Failed to restore the product. Please try again.");
        }
    }
}


</script>